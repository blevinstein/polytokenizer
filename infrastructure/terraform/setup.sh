#!/bin/bash

# Terraform automation script for Vertex AI setup

set -e

# Configuration
PROJECT_ID=""
REGION="us-central1"
SERVICE_ACCOUNT_NAME="vertex-ai-embeddings"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [COMMAND] [OPTIONS]

Automate Vertex AI infrastructure deployment with Terraform

COMMANDS:
    init        Initialize Terraform
    plan        Show deployment plan
    apply       Deploy infrastructure
    destroy     Destroy infrastructure
    output      Show outputs
    clean       Clean up local files
    setup       Complete setup (init + apply)

OPTIONS:
    -p, --project       GCP Project ID (required)
    -r, --region        GCP Region (default: us-central1)
    -s, --service-account  Service account name (default: vertex-ai-embeddings)
    -h, --help          Show this help message

EXAMPLES:
    $0 setup --project my-gcp-project
    $0 apply --project my-project --region europe-west1
    $0 output --project my-project
    $0 destroy --project my-project

EOF
}

# Function to create terraform.tfvars
create_tfvars() {
    cat > terraform.tfvars << EOF
# Generated by setup script
project_id = "$PROJECT_ID"
region = "$REGION"
service_account_name = "$SERVICE_ACCOUNT_NAME"
EOF
    print_status "Created terraform.tfvars with your configuration"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if terraform is installed
    if ! command -v terraform &> /dev/null; then
        print_error "Terraform is not installed. Please install it first:"
        echo "  macOS: brew install terraform"
        echo "  Or download from: https://terraform.io/downloads"
        exit 1
    fi
    
    # Check if gcloud is installed
    if ! command -v gcloud &> /dev/null; then
        print_error "gcloud CLI is not installed. Please install it first:"
        echo "  macOS: brew install google-cloud-sdk"
        echo "  Or visit: https://cloud.google.com/sdk/docs/install"
        exit 1
    fi
    
    # Check if authenticated
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null | grep -q '@'; then
        print_error "Not authenticated with gcloud. Please run:"
        echo "  gcloud auth login"
        echo "  gcloud auth application-default login"
        exit 1
    fi
    
    print_status "Prerequisites check passed!"
}

# Function to run terraform init
terraform_init() {
    print_status "Initializing Terraform..."
    terraform init
    print_status "Terraform initialized successfully!"
}

# Function to run terraform plan
terraform_plan() {
    print_status "Creating Terraform plan..."
    terraform plan -var-file=terraform.tfvars
}

# Function to run terraform apply
terraform_apply() {
    print_status "Applying Terraform configuration..."
    terraform apply -var-file=terraform.tfvars -auto-approve
    print_status "Infrastructure deployed successfully!"
    
    # Show important outputs
    echo ""
    print_info "=== Deployment Summary ==="
    echo "Project ID: $(terraform output -raw project_id)"
    echo "Region: $(terraform output -raw region)"
    echo "Service Account: $(terraform output -raw service_account_email)"
    
    echo ""
    print_info "=== Next Steps ==="
    echo "1. Set environment variables:"
    echo "   export VERTEX_PROJECT_ID=\"$(terraform output -raw project_id)\""
    echo "   export VERTEX_LOCATION=\"$(terraform output -raw region)\""
    echo "   export VERTEX_CREDENTIALS='\$(terraform output -raw service_account_key_json)'"
    echo ""
    echo "2. Use in your application:"
    echo "   configure({ vertex: { projectId: process.env.VERTEX_PROJECT_ID, location: process.env.VERTEX_LOCATION, credentials: JSON.parse(process.env.VERTEX_CREDENTIALS) } });"
    echo ""
    echo "3. Test with polytokenizer:"
    echo "   npm run test"
}

# Function to run terraform destroy
terraform_destroy() {
    print_warning "This will destroy all Vertex AI infrastructure"
    read -p "Are you sure? (yes/no): " -r
    if [[ $REPLY =~ ^[Yy]es$ ]]; then
        print_status "Destroying infrastructure..."
        terraform destroy -var-file=terraform.tfvars -auto-approve
        print_status "Infrastructure destroyed successfully!"
    else
        print_info "Destruction cancelled."
    fi
}

# Function to show outputs
terraform_output() {
    print_info "=== Terraform Outputs ==="
    terraform output
}

# Function to clean up
clean() {
    print_status "Cleaning up local files..."
    rm -rf .terraform/
    rm -f .terraform.lock.hcl
    rm -f terraform.tfstate*
    rm -f terraform.tfvars
    rm -rf keys/
    print_status "Cleanup completed!"
}

# Parse command line arguments
COMMAND=""
while [[ $# -gt 0 ]]; do
    case $1 in
        init|plan|apply|destroy|output|clean|setup)
            COMMAND="$1"
            shift
            ;;
        -p|--project)
            PROJECT_ID="$2"
            shift 2
            ;;
        -r|--region)
            REGION="$2"
            shift 2
            ;;
        -s|--service-account)
            SERVICE_ACCOUNT_NAME="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            print_error "Unknown option $1"
            usage
            exit 1
            ;;
    esac
done

# Validate required parameters
if [[ -z "$COMMAND" ]]; then
    print_error "Command is required."
    usage
    exit 1
fi

if [[ -z "$PROJECT_ID" ]]; then
    print_error "Project ID is required. Use --project or -p"
    usage
    exit 1
fi

# Set GCP project
print_status "Setting GCP project to $PROJECT_ID"
gcloud config set project "$PROJECT_ID"

# Execute command
case $COMMAND in
    init)
        check_prerequisites
        create_tfvars
        terraform_init
        ;;
    plan)
        check_prerequisites
        create_tfvars
        terraform_plan
        ;;
    apply)
        check_prerequisites
        create_tfvars
        terraform_apply
        ;;
    destroy)
        terraform_destroy
        ;;
    output)
        terraform_output
        ;;
    clean)
        clean
        ;;
    setup)
        check_prerequisites
        create_tfvars
        terraform_init
        terraform_plan
        terraform_apply
        ;;
    *)
        print_error "Unknown command: $COMMAND"
        usage
        exit 1
        ;;
esac 